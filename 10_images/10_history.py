In [1]:
mspacek@Godel:~/SciPyCourse2017/notes/10_images$ ipython
Python 3.5.2 (default, Nov 17 2016, 17:05:23)
Type "copyright", "credits" or "license" for more information.

IPython 5.3.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: import skimage

In [2]: from scipy import ndimage

In [3]: import numpy as np

In [4]: import matplotlib.pyplot as plt

In [5]: from skimage import io

In [6]: io.imread?

In [7]: faceg = io.imread('face_gray.png')

In [8]: type(faceg)
Out[8]: numpy.ndarray

In [9]: faceg
Out[9]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [10]: faceg.shape
Out[10]: (782, 782)

In [11]: pwd
Out[11]: '/home/mspacek/SciPyCourse2017/notes/10_images'

In [12]: cd ..
/home/mspacek/SciPyCourse2017/notes

In [13]: faceg = io.imread('./10_images/face_gray.png')

In [14]: faceg = io.imread('/home/mspacek/SciPyCourse2017/notes/10_images/face_gray.png')

In [15]: cd 10_images/
/home/mspacek/SciPyCourse2017/notes/10_images

In [16]: pwd
Out[16]: '/home/mspacek/SciPyCourse2017/notes/10_images'

In [17]: faceg
Out[17]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [18]: 2**8
Out[18]: 256

In [19]: faceg
Out[19]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [20]: f, ax = subplots()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-20-ec5802d7f248> in <module>()
----> 1 f, ax = subplots()

NameError: name 'subplots' is not defined
> <ipython-input-20-ec5802d7f248>(1)<module>()
----> 1 f, ax = subplots()

ipdb> c

In [21]: f, ax = plt.subplots()

In [22]: im = ax.imshow(faceg)

In [23]: f.colorbar(im)
Out[23]: <matplotlib.colorbar.Colorbar at 0x7fb9737bb438>

In [24]: im.set_cmap('gray')

In [25]: ax.imshow(faceg, cmap='gray')
Out[25]: <matplotlib.image.AxesImage at 0x7fb973770f28>

In [26]: ax.imshow(faceg, cmap='plasma')
Out[26]: <matplotlib.image.AxesImage at 0x7fb97377c080>

In [27]: ax.imshow(faceg, cmap='gray')
Out[27]: <matplotlib.image.AxesImage at 0x7fb95c15a5f8>

In [28]: ax.set_xticks([])
Out[28]: []

In [29]: ax.set_yticks([])
Out[29]: []

In [30]: faceg
Out[30]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [31]: np.rot90?

In [32]: face90 = np.rot90(faceg)

In [33]: face90.shape
Out[33]: (782, 782)

In [34]: f, ax = plt.subplots()

In [35]: ax.imshow(face90, cmap='gray')
Out[35]: <matplotlib.image.AxesImage at 0x7fb95c0a5710>

In [36]: np.rot90?

In [37]: io.imsave('face90.png', face90)

In [38]: from scipy import ndimage

In [39]: ndimage.rotate?

In [40]: face45 = ndimage.rotate(faceg, 45)

In [41]: faceg.shape
Out[41]: (782, 782)

In [42]: face45.shape
Out[42]: (1106, 1106)

In [43]: f, ax = plt.subplots()

In [44]: ax.imshow(face45, cmap='gray')
Out[44]: <matplotlib.image.AxesImage at 0x7fb95c0328d0>

In [45]: plt.figure()
Out[45]: <matplotlib.figure.Figure at 0x7fb95c0bb710>

In [46]: ax.imshow(faceg, cmap='gray', interpolation='guassian')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-46-d2bd01c10fce> in <module>()
----> 1 ax.imshow(faceg, cmap='gray', interpolation='guassian')

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1890                     warnings.warn(msg % (label_namer, func.__name__),
   1891                                   RuntimeWarning, stacklevel=2)
-> 1892             return func(ax, *args, **kwargs)
   1893         pre_doc = inner.__doc__
   1894         if pre_doc is None:

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5114         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,
   5115                               filternorm=filternorm, filterrad=filterrad,
-> 5116                               resample=resample, **kwargs)
   5117
   5118         im.set_data(X)

/usr/local/lib/python3.5/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)
    700             filterrad=filterrad,
    701             resample=resample,
--> 702             **kwargs
    703         )
    704

/usr/local/lib/python3.5/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)
    233         self.set_filternorm(filternorm)
    234         self.set_filterrad(filterrad)
--> 235         self.set_interpolation(interpolation)
    236         self.set_resample(resample)
    237         self.axes = ax

/usr/local/lib/python3.5/dist-packages/matplotlib/image.py in set_interpolation(self, s)
    594         s = s.lower()
    595         if s not in _interpd_:
--> 596             raise ValueError('Illegal interpolation string')
    597         self._interpolation = s
    598         self.stale = True

ValueError: Illegal interpolation string
> /usr/local/lib/python3.5/dist-packages/matplotlib/image.py(596)set_interpolation()
    594         s = s.lower()
    595         if s not in _interpd_:
--> 596             raise ValueError('Illegal interpolation string')
    597         self._interpolation = s
    598         self.stale = True

ipdb> c

In [47]: ax.imshow(faceg, cmap='gray', interpolation='gaussian')
Out[47]: <matplotlib.image.AxesImage at 0x7fb95c037eb8>

In [48]: faceg
Out[48]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [49]: from skimage import filters

In [50]: faceg
Out[50]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [51]: faceg.shape
Out[51]: (782, 782)

In [52]: faceg[0:10]
Out[52]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [53]: faceg[0:10].shape
Out[53]: (10, 782)

In [54]: lowres = faceg[::10, ::10]

In [55]: lowres.shape
Out[55]: (79, 79)

In [56]: f, ax = plt.subplots()

In [57]: ax.imshow(lowres, cmap='gray')
Out[57]: <matplotlib.image.AxesImage at 0x7fb94eb1c208>

In [58]: ax.imshow(lowres, cmap='gray', interpolation='gaussian')
Out[58]: <matplotlib.image.AxesImage at 0x7fb94eb2a978>

In [59]: ax.imshow(lowres, cmap='gray', interpolation=None)
Out[59]: <matplotlib.image.AxesImage at 0x7fb94eb9a780>

In [60]: from skimage import filters

In [61]: filters.gaussian?

In [62]: lowresgauss = filters.gaussian(lowres, sigma=2)

In [63]: lowresgauss.shape
Out[63]: (79, 79)

In [64]: f, ax = plt.subplots()

In [65]: ax.imshow(lowresgauss, cmap='gray')
Out[65]: <matplotlib.image.AxesImage at 0x7fb94ea99860>

In [66]: lowres = faceg[::10, ::10]

In [67]: faceg
Out[67]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [68]: faceg.shape
Out[68]: (782, 782)

In [69]: lowres = faceg[0:783:10, 0:783:10]

In [70]: lowres.shape
Out[70]: (79, 79)

In [71]: lowres = faceg[::10, ::10]

In [72]: ndimage.zoom?

In [73]: faceg
Out[73]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [74]: faceg.shape
Out[74]: (782, 782)

In [75]: cface = io.imread('face.png')

In [76]: cface.shape
Out[76]: (782, 782, 3)

In [77]: cface[:, :, 0]
Out[77]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [78]: cface[:, :, 1]
Out[78]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [79]: cface[:, :, 2]
Out[79]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [80]: cface = io.imread('face.png')

In [81]: f, ax = plt.subplots()

In [82]: cface
Out[82]:
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,
       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)

In [83]: cface.shape
Out[83]: (782, 782, 3)

In [84]: cface[:, :, 0]
Out[84]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [85]: ax.imshow(cface[:, :, 0], cmap='gray')
Out[85]: <matplotlib.image.AxesImage at 0x7fb97fb5c2e8>

In [86]: ax.imshow(cface[:, :, 1], cmap='gray')
Out[86]: <matplotlib.image.AxesImage at 0x7fb97fb703c8>

In [87]: ax.imshow(cface[:, :, 2], cmap='gray')
Out[87]: <matplotlib.image.AxesImage at 0x7fb97fb70be0>

In [88]: cface
Out[88]:
array([[[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       ...,
       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)

In [89]: cface.shape
Out[89]: (782, 782, 3)

In [90]: from skimage import color

In [91]: color.rgb2gray?

In [92]: gface = color.rgb2gray(cface)

In [93]: gface.shape
Out[93]: (782, 782)

In [94]: ax.imshow(gface, cmap='gray')
Out[94]: <matplotlib.image.AxesImage at 0x7fb97fb5cb38>

In [95]: plt.close('all')

In [96]: from skimage import data

In [97]: immun = data.immunohistochemistry()

In [98]: immun.shape
Out[98]: (512, 512, 3)

In [99]: f, ax = plt.subplots()

In [100]: ax.imshow(immun)
Out[100]: <matplotlib.image.AxesImage at 0x7fb97fb5ceb8>

In [101]: temp = immun.copy()

In [102]: temp
Out[102]:
array([[[156, 118,  81],
        [163, 125,  88],
        [156, 116,  81],
        ...,
        [152, 160, 196],
        [169, 175, 207],
        [189, 196, 225]],

       [[141, 105,  69],
        [144, 108,  72],
        [141, 102,  69],
        ...,
        [164, 172, 208],
        [167, 173, 205],
        [175, 182, 210]],

       [[125,  92,  59],
        [132,  99,  66],
        [138, 103,  71],
        ...,
        [172, 181, 214],
        [164, 171, 200],
        [164, 171, 197]],

       ...,
       [[221, 218, 209],
        [226, 223, 214],
        [234, 231, 222],
        ...,
        [212, 211, 207],
        [214, 210, 207],
        [217, 213, 210]],

       [[217, 214, 207],
        [222, 219, 212],
        [230, 227, 220],
        ...,
        [214, 213, 211],
        [211, 207, 204],
        [215, 210, 207]],

       [[222, 219, 212],
        [222, 219, 212],
        [224, 221, 214],
        ...,
        [210, 209, 207],
        [210, 205, 202],
        [215, 210, 207]]], dtype=uint8)

In [103]: temp.shape
Out[103]: (512, 512, 3)

In [104]: temp[:, :, 1:3].shape
Out[104]: (512, 512, 2)

In [105]: temp[:, :, 0] = 0

In [106]: ax.imshow(temp)
Out[106]: <matplotlib.image.AxesImage at 0x7fb97fafe0b8>

In [107]: temp[:, :, 1] = 0

In [108]: ax.imshow(temp)
Out[108]: <matplotlib.image.AxesImage at 0x7fb97fb03908>

In [109]: temp[:, :, 2]
Out[109]:
array([[ 81,  88,  81, ..., 196, 207, 225],
       [ 69,  72,  69, ..., 208, 205, 210],
       [ 59,  66,  71, ..., 214, 200, 197],
       ...,
       [209, 214, 222, ..., 207, 207, 210],
       [207, 212, 220, ..., 211, 204, 207],
       [212, 212, 214, ..., 207, 202, 207]], dtype=uint8)

In [110]: f, ax = plt.subplots()

In [111]: blue = temp[:, :, 2]

In [112]: blue.shape
Out[112]: (512, 512)

In [113]: blue.ravel().shape
Out[113]: (262144,)

In [114]: ax.hist(blue.ravel(), bins=np.arange(256))
Out[114]:
(array([  9.00000000e+00,   3.00000000e+00,   2.00000000e+00,
          4.00000000e+00,   3.00000000e+00,   7.00000000e+00,
          1.10000000e+01,   8.00000000e+00,   1.50000000e+01,
          1.80000000e+01,   2.70000000e+01,   3.20000000e+01,
          3.40000000e+01,   3.70000000e+01,   5.40000000e+01,
          4.60000000e+01,   6.00000000e+01,   6.20000000e+01,
          7.30000000e+01,   1.10000000e+02,   9.70000000e+01,
          1.08000000e+02,   1.21000000e+02,   1.50000000e+02,
          1.69000000e+02,   1.91000000e+02,   1.95000000e+02,
          2.25000000e+02,   2.05000000e+02,   2.78000000e+02,
          2.92000000e+02,   3.02000000e+02,   3.26000000e+02,
          3.54000000e+02,   3.90000000e+02,   4.06000000e+02,
          3.88000000e+02,   4.12000000e+02,   4.72000000e+02,
          4.83000000e+02,   4.99000000e+02,   5.26000000e+02,
          5.25000000e+02,   5.94000000e+02,   6.51000000e+02,
          6.18000000e+02,   6.64000000e+02,   7.00000000e+02,
          6.90000000e+02,   8.17000000e+02,   7.89000000e+02,
          8.55000000e+02,   8.32000000e+02,   8.84000000e+02,
          9.29000000e+02,   9.62000000e+02,   9.83000000e+02,
          1.04300000e+03,   1.03300000e+03,   1.03400000e+03,
          1.14600000e+03,   1.12300000e+03,   1.08700000e+03,
          1.15700000e+03,   1.26600000e+03,   1.28800000e+03,
          1.29000000e+03,   1.31100000e+03,   1.33900000e+03,
          1.29700000e+03,   1.42600000e+03,   1.40200000e+03,
          1.40600000e+03,   1.51200000e+03,   1.56600000e+03,
          1.56200000e+03,   1.57600000e+03,   1.57300000e+03,
          1.61900000e+03,   1.59300000e+03,   1.62300000e+03,
          1.74300000e+03,   1.65700000e+03,   1.69400000e+03,
          1.66900000e+03,   1.77200000e+03,   1.64300000e+03,
          1.69500000e+03,   1.65600000e+03,   1.74300000e+03,
          1.67600000e+03,   1.73400000e+03,   1.76200000e+03,
          1.80800000e+03,   1.75800000e+03,   1.84600000e+03,
          1.74200000e+03,   1.77600000e+03,   1.81300000e+03,
          1.70400000e+03,   1.71600000e+03,   1.74100000e+03,
          1.80000000e+03,   1.69000000e+03,   1.72000000e+03,
          1.68900000e+03,   1.73100000e+03,   1.70200000e+03,
          1.70400000e+03,   1.66600000e+03,   1.59800000e+03,
          1.54800000e+03,   1.60000000e+03,   1.49700000e+03,
          1.56700000e+03,   1.51700000e+03,   1.44300000e+03,
          1.46900000e+03,   1.41000000e+03,   1.35300000e+03,
          1.42600000e+03,   1.40200000e+03,   1.30600000e+03,
          1.24600000e+03,   1.30300000e+03,   1.19200000e+03,
          1.22200000e+03,   1.17500000e+03,   1.16100000e+03,
          1.11300000e+03,   1.11500000e+03,   1.05200000e+03,
          1.01500000e+03,   9.54000000e+02,   1.02300000e+03,
          9.25000000e+02,   9.06000000e+02,   8.75000000e+02,
          8.56000000e+02,   8.69000000e+02,   9.22000000e+02,
          8.07000000e+02,   7.79000000e+02,   7.60000000e+02,
          7.84000000e+02,   7.36000000e+02,   7.44000000e+02,
          7.08000000e+02,   7.25000000e+02,   6.59000000e+02,
          6.35000000e+02,   6.14000000e+02,   6.09000000e+02,
          5.93000000e+02,   5.95000000e+02,   5.69000000e+02,
          5.27000000e+02,   5.33000000e+02,   5.19000000e+02,
          5.30000000e+02,   5.34000000e+02,   5.28000000e+02,
          4.60000000e+02,   4.89000000e+02,   4.99000000e+02,
          4.65000000e+02,   5.01000000e+02,   4.79000000e+02,
          5.03000000e+02,   5.18000000e+02,   4.84000000e+02,
          4.52000000e+02,   4.95000000e+02,   5.22000000e+02,
          5.12000000e+02,   5.09000000e+02,   4.63000000e+02,
          5.44000000e+02,   5.89000000e+02,   5.99000000e+02,
          6.14000000e+02,   5.87000000e+02,   6.26000000e+02,
          6.60000000e+02,   6.94000000e+02,   6.68000000e+02,
          7.36000000e+02,   7.89000000e+02,   7.72000000e+02,
          8.01000000e+02,   7.86000000e+02,   7.81000000e+02,
          8.53000000e+02,   8.89000000e+02,   8.94000000e+02,
          9.42000000e+02,   1.09400000e+03,   1.04400000e+03,
          1.07900000e+03,   1.17100000e+03,   1.22400000e+03,
          1.21800000e+03,   1.26900000e+03,   1.37400000e+03,
          1.48500000e+03,   1.49300000e+03,   1.56700000e+03,
          1.64900000e+03,   1.70600000e+03,   1.82300000e+03,
          1.97900000e+03,   1.95600000e+03,   2.14200000e+03,
          2.18300000e+03,   2.28800000e+03,   2.45300000e+03,
          2.54400000e+03,   2.64900000e+03,   2.77200000e+03,
          2.78200000e+03,   2.84600000e+03,   2.81400000e+03,
          2.83000000e+03,   2.83000000e+03,   2.75000000e+03,
          2.72600000e+03,   2.54300000e+03,   2.38800000e+03,
          2.31000000e+03,   2.23800000e+03,   2.10700000e+03,
          1.95800000e+03,   2.05600000e+03,   1.93800000e+03,
          4.64800000e+03,   1.48700000e+03,   9.79000000e+02,
          7.44000000e+02,   6.05000000e+02,   5.29000000e+02,
          4.20000000e+02,   3.59000000e+02,   2.74000000e+02,
          2.00000000e+02,   1.92000000e+02,   1.34000000e+02,
          1.15000000e+02,   8.80000000e+01,   8.10000000e+01,
          7.20000000e+01,   5.10000000e+01,   3.50000000e+01,
          3.70000000e+01,   2.80000000e+01,   4.60000000e+01]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255]),
 <a list of 255 Patch objects>)

In [115]: facea = io.imread('face_alpha.png')

In [116]: facea.shape
Out[116]: (782, 782, 4)

In [117]: ax.imshow(facea)
Out[117]: <matplotlib.image.AxesImage at 0x7fb94d6149e8>

In [118]: f, ax = plt.subplots()

In [119]: ax.imshow(facea)
Out[119]: <matplotlib.image.AxesImage at 0x7fb94d5b8cf8>

In [120]: facea[:, :, 3]
Out[120]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [121]: bg = np.zeros_like(facea)

In [122]: gb.shape
---------------------------------------------------------------
NameError                     Traceback (most recent call last)
<ipython-input-122-d04c45447cb3> in <module>()
----> 1 gb.shape

NameError: name 'gb' is not defined
> <ipython-input-122-d04c45447cb3>(1)<module>()
----> 1 gb.shape

ipdb> c

In [123]: bg.shape
Out[123]: (782, 782, 4)

In [124]: bg
Out[124]:
array([[[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       ...,
       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]],

       [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        ...,
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]]], dtype=uint8)

In [125]: bg[:, :] = 255, 0, 0, 255

In [126]: ax.imshow(bg)
Out[126]: <matplotlib.image.AxesImage at 0x7fb94d3ec400>

In [127]: f, ax = plt.subplots()

In [128]: ax.imshow(bg)
Out[128]: <matplotlib.image.AxesImage at 0x7fb97fb4e240>

In [129]: ax.imshow(facea)
Out[129]: <matplotlib.image.AxesImage at 0x7fb94d395160>

In [130]: ohki = io.imread('ohki2005.png')

In [131]: plt.close('all')

In [132]: f, ax = plt.subplots()

In [133]: ohki.shape
Out[133]: (512, 491)

In [134]: ax.imshow(ohki, cmap='gray')
Out[134]: <matplotlib.image.AxesImage at 0x7fb94d193d68>

In [135]: f, ax = plt.subplots()

In [136]: ax.hist(ohki.ravel(), bins=np.arange(256))
Out[136]:
(array([  1.30000000e+01,   3.70000000e+01,   1.40000000e+02,
          1.47000000e+02,   1.66000000e+02,   3.42000000e+02,
          3.08000000e+02,   6.28000000e+02,   7.92000000e+02,
          1.60600000e+03,   1.18600000e+03,   2.07100000e+03,
          1.93900000e+03,   3.27400000e+03,   2.05700000e+03,
          2.19400000e+03,   2.85900000e+03,   2.63500000e+03,
          2.70900000e+03,   2.41400000e+03,   2.31600000e+03,
          1.94800000e+03,   1.93200000e+03,   2.08300000e+03,
          2.12100000e+03,   2.78300000e+03,   2.79200000e+03,
          2.86000000e+03,   2.91900000e+03,   2.81200000e+03,
          2.79500000e+03,   2.84800000e+03,   2.60500000e+03,
          2.76200000e+03,   2.47900000e+03,   2.41100000e+03,
          2.56900000e+03,   2.47000000e+03,   2.36700000e+03,
          2.25200000e+03,   2.48000000e+03,   2.52200000e+03,
          2.42800000e+03,   2.55200000e+03,   2.60900000e+03,
          2.56700000e+03,   2.47000000e+03,   2.31200000e+03,
          2.60600000e+03,   2.43900000e+03,   2.41300000e+03,
          2.46300000e+03,   2.25200000e+03,   2.35700000e+03,
          2.42600000e+03,   2.24500000e+03,   2.38500000e+03,
          2.27900000e+03,   2.23600000e+03,   2.32200000e+03,
          2.17400000e+03,   2.19200000e+03,   2.11100000e+03,
          2.19100000e+03,   2.11500000e+03,   2.14900000e+03,
          2.25800000e+03,   2.12800000e+03,   2.14100000e+03,
          2.19300000e+03,   2.16100000e+03,   2.31000000e+03,
          2.28100000e+03,   2.26600000e+03,   2.23300000e+03,
          2.15800000e+03,   2.18900000e+03,   2.13900000e+03,
          2.13600000e+03,   2.10100000e+03,   2.11400000e+03,
          2.06600000e+03,   2.00100000e+03,   1.93500000e+03,
          1.95900000e+03,   1.86400000e+03,   1.82900000e+03,
          1.79300000e+03,   1.76800000e+03,   1.83500000e+03,
          1.67000000e+03,   1.77600000e+03,   1.71600000e+03,
          1.68000000e+03,   1.68500000e+03,   1.62900000e+03,
          1.64900000e+03,   1.63300000e+03,   1.62500000e+03,
          1.51300000e+03,   1.44200000e+03,   1.52300000e+03,
          1.43700000e+03,   1.42600000e+03,   1.43800000e+03,
          1.36000000e+03,   1.25400000e+03,   1.30700000e+03,
          1.36300000e+03,   1.22500000e+03,   1.21900000e+03,
          1.23400000e+03,   1.10100000e+03,   1.07100000e+03,
          1.12000000e+03,   1.03000000e+03,   9.53000000e+02,
          1.01500000e+03,   9.61000000e+02,   9.27000000e+02,
          8.65000000e+02,   7.93000000e+02,   7.93000000e+02,
          6.92000000e+02,   6.93000000e+02,   6.80000000e+02,
          5.78000000e+02,   6.09000000e+02,   5.49000000e+02,
          5.26000000e+02,   5.14000000e+02,   4.96000000e+02,
          4.81000000e+02,   4.61000000e+02,   4.71000000e+02,
          4.22000000e+02,   4.22000000e+02,   4.72000000e+02,
          4.19000000e+02,   3.63000000e+02,   3.34000000e+02,
          3.15000000e+02,   3.05000000e+02,   3.24000000e+02,
          2.74000000e+02,   2.69000000e+02,   2.56000000e+02,
          2.21000000e+02,   2.62000000e+02,   1.96000000e+02,
          2.00000000e+02,   1.92000000e+02,   2.12000000e+02,
          1.71000000e+02,   2.05000000e+02,   2.05000000e+02,
          2.22000000e+02,   2.10000000e+02,   1.79000000e+02,
          1.86000000e+02,   1.67000000e+02,   1.82000000e+02,
          1.47000000e+02,   1.60000000e+02,   1.26000000e+02,
          1.60000000e+02,   1.47000000e+02,   1.26000000e+02,
          1.41000000e+02,   1.34000000e+02,   1.40000000e+02,
          1.24000000e+02,   1.04000000e+02,   1.21000000e+02,
          1.03000000e+02,   1.08000000e+02,   9.50000000e+01,
          9.30000000e+01,   1.14000000e+02,   8.40000000e+01,
          9.90000000e+01,   7.70000000e+01,   8.50000000e+01,
          7.30000000e+01,   4.80000000e+01,   7.90000000e+01,
          6.80000000e+01,   5.70000000e+01,   7.30000000e+01,
          5.50000000e+01,   7.70000000e+01,   6.30000000e+01,
          6.20000000e+01,   6.60000000e+01,   5.10000000e+01,
          5.40000000e+01,   5.10000000e+01,   4.40000000e+01,
          4.60000000e+01,   4.10000000e+01,   4.30000000e+01,
          5.30000000e+01,   4.10000000e+01,   5.90000000e+01,
          3.80000000e+01,   4.20000000e+01,   4.90000000e+01,
          4.10000000e+01,   4.00000000e+01,   4.10000000e+01,
          3.50000000e+01,   5.00000000e+01,   4.90000000e+01,
          4.00000000e+01,   4.60000000e+01,   4.80000000e+01,
          5.70000000e+01,   6.00000000e+01,   5.20000000e+01,
          7.90000000e+01,   5.80000000e+01,   4.80000000e+01,
          3.60000000e+01,   6.00000000e+01,   3.60000000e+01,
          5.00000000e+01,   4.60000000e+01,   3.90000000e+01,
          3.50000000e+01,   3.00000000e+01,   3.10000000e+01,
          3.40000000e+01,   2.70000000e+01,   3.60000000e+01,
          2.00000000e+01,   1.10000000e+01,   1.10000000e+01,
          5.00000000e+00,   0.00000000e+00,   5.00000000e+00,
          2.00000000e+00,   5.00000000e+00,   4.00000000e+00,
          8.00000000e+00,   6.00000000e+00,   3.00000000e+00,
          7.00000000e+00,   4.00000000e+00,   1.00000000e+01,
          1.00000000e+01,   1.00000000e+01,   2.20000000e+01,
          1.70000000e+01,   1.60000000e+01,   2.90000000e+01]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255]),
 <a list of 255 Patch objects>)

In [137]: from skimage import filters

In [138]: filters.sobel?

In [139]: edges = filters.sobel(ohki)

In [140]: f, ax = plt.subplots()

In [141]: ax.imshow(edges, cmap='gray')
Out[141]: <matplotlib.image.AxesImage at 0x7fb94e5dee80>

In [142]: from skimage.feature import canny

In [143]: canny?

In [144]: canny?

In [145]: edges = canny(ohki, sigma=1.5)

In [146]: f, ax = plt.subplots()

In [147]: ax.imshow(edges, cmap='gray')
Out[147]: <matplotlib.image.AxesImage at 0x7fb94df255c0>

In [148]: f, ax = plt.subplots()

In [149]: ax.hist(edges.ravel(), bins=np.arange(256))
Out[149]:
(array([ 244464.,    6928.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.,       0.,       0.,       0.,
              0.,       0.,       0.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255]),
 <a list of 255 Patch objects>)

In [150]: mask = ndimage.binary_fill_holes(edges)

In [151]: f, ax = plt.subplots()

In [152]: ax.imshow(mask, cmap='gray')
Out[152]: <matplotlib.image.AxesImage at 0x7fb94ad54ef0>

In [153]: import av

In [154]: v = av.open('movie.avi')

In [155]: mv = []

In [156]: for frame in v.decode(video=0):
     ...:     mv.append(np.asarray(frame.to_image()))
     ...:

In [157]: mv = np.asarray(mv)

In [158]: mv.shape
Out[158]: (300, 240, 320, 3)

In [159]: f, ax = plt.subplots()

In [160]: ax.imshow(mv[0])
Out[160]: <matplotlib.image.AxesImage at 0x7fb94acbd278>

In [161]:
